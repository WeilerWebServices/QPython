Python pass 语句
================



简述
-----
记得上学时，《新华字典》绝对堪称神器，检索内容相当给力。但随着网络的发展，现在几乎很少有人在用了。

如何使用《新华字典》呢？先查索引，然后通过索引查找相应的内容，简单、方便、快捷。

出于这种需求，Python 也提供了这样一种数据类型 - dict，翻译为中文就是“字典”。

字典的特点
-----
像列表和字典，可以很容易地被改变 - 在运行时可以随意地变小/变大（无需复制）。所以，没有列表和字典的 Python 程序或脚本，几乎是无法想象的。

词典可以包含在列表中，反之亦然。但字典和列表（或其它序列）之间有什么区别呢？

- 列表是对象的有序集合，而字典是无序集。
- 对于列表（其他复合数据类型也一样）来说，元素只有值；而对于字典，元素由 key:value - 对的形式组成。
- 字典中的元素通过 key 来访问，而非通过他们的位置来访问（主要区别）。

字典是一个关联数组（也称为哈希），其中的任何 key 都与 value 相关联（或映射），value 可以是 Python 中的任何数据类型，所以字典是无序的 key:value 对。

字典不支持序列数据类型（例如：字符串、元组和列表）的序列操作（例如：索引 
切片、连接 +、重复 *），字典属于内置映射类型，同时也是该类型的唯一代表！

虽然没有报错，但前面的值被后面的覆盖了，这样做毫无意义。
在 Python 中，字典由内置的 dict 类型定义。

要创建字典，需要将所有项（元素）放在花括号（{}）内，以逗号（,）分隔。其中，每个元素都以 key:value 对的形式出现，key 和 value 可以是任何数据类型。

**注意：** 字典中的 key 必须是唯一的。

:: 
    d = {'name':'Python', 'site':'www.python.org'}
    type(d)
    <class 'dict'>

<button>Run ...</button>

字典的创建方式很多，还可以使用 dict()：

由于列表是可变的，不可 hash，因此不能作为字典的 key。

key 唯一，意思是说：不要有重复的 key 出现。

虽然 value 可以是任何数据类型，并且可以重复，但 key 必须是不可变类型（例如：字符串、数字）或具有不可变元素的元组。

::
     d = {'name':'python', (1, 2):'C++'}  # 具有不可变元素的元组
     d
    {(1, 2): 'C++', 'name': 'python'}
    
     d = {'name':'python', [1, 2]:'C++'}  # 列表
    ...
    TypeError: unhashable type: 'list'

<button>Run ...</button>

由于列表是可变的，不可 hash，因此不能作为字典的 key。

key 唯一，意思是说：不要有重复的 key 出现。

::
     d = {'name':'Python', 'name':'C++'}  # key 都是 'name'
     d
    {'name': 'C++'}

<button>Run ...</button>

虽然没有报错，但前面的值被后面的覆盖了，这样做毫无意义。


从字典访问元素
-----

字典通过 key 来检索 value，有两种方式：

- 在方括号（[]）内使用 key
- key 与 get() 方法与一起使用

区别在于：使用 get()，如果没有找到 key，则返回 None，而不是 KeyError。

::
    d = {'name':'Python', 'site':'www.python.org'}
    
    print(d['name'])
   Python
    
    print(d.get('site'))
   www.python.org
    
    print(d['version'])  # 没有找到 key，引发 KeyError
   ...
   KeyError: 'version'
    
    print(d.get('version'))  # 没有找到 key，返回 None
   None
    print(d.get('version', 3.5))  # 没有找到 key，返回默认值
   3.5
   1


<button>Run ...</button>

更改或添加元素
-----

字典是可变的，可以添加新元素，也可以使用赋值运算符（=）更改现有元素的值。

如果 key 存在，value 将被更新；否则，新的 key:value 对会被添加到字典中。

::
     d = {}
     
     d['name'] = 'Python'  # 添加
     d
    {'name': 'Python'}
     
     d['site'] = 'www.python.org'  # 添加
     d
    {'site': 'www.python.org', 'name': 'Python'}
     
     d['name'] = 'Py'  #  更新
     d
    {'site': 'www.python.org', 'name': 'Py'}

<button>Run ...</button>

删除字典或元素
-----

通过使用 pop() 方法，可以删除指定 key 对应的元素，并返回其 value。

popitem() 方法可以用来删除并返回一个任意元素 (key, value)，clear() 方法则会一次性删除所有元素。

还可以使用 del 关键字来删除单个元素或整个字典本身。

::
     d = {'name':'Python', 'site':'www.python.org', 'version':3.5, 'from':1991}
    >>> 
     d.pop('site')  # 删除某一项
    'www.python.org'
     d
    {'from': 1991, 'version': 3.5, 'name': 'Python'}
     
     d.popitem()  # 删除任意项
    ('from', 1991)
     d
    {'version': 3.5, 'name': 'Python'}
     
     del d['version']  # 删除某一项
     d
    {'name': 'Python'}
     
     d.clear()  # 清空 - 删除所有项
     d
    {}
     
     del d  # 删除字典本身
     d
    ...
    NameError: name 'd' is not defined

<button>Run ...</button>

基本操作
-----

字典不支持序列数据类型（例如：字符串、元组和列表）的序列操作，例如：索引 
切片、连接（+）、重复（*）等。

成员测试
>>>>>>>>>>

可以测试一个 key 是否存在于字典中，使用关键字 in。

注意： 成员测试仅适用于 key，不适用于 value。

::
     d = {'name':'Python', 'site':'www.python.org'}
    
     'name' in d
    True
     
     'version' not in d
    True
     
     'Python' in d  # 不能检测 value
    False

<button>Run ...</button>

遍历字典
>>>>>>>>>>

使用 for 循环，可以遍历字典中的每个 key。

::
     d = {'name':'Python', 'site':'www.python.org'}
     
     for key in d:
    ...     print(key)
    ... 
    name
    site

<button>Run ...</button>

字典的方法
-----

字典提供了许多方法，可以通过 dir() 来查看方法列表：

::
     dir(dict)
    ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
1
2
可以看到，有以下方法可用：
+-----------------------+----------------------------------------------------------------------------------------------------------------+
| 方法	                |         描述                                                                                                   | 
+=======================+================================================================================================================+
|clear()                | 	删除字典中的所有元素                                                                                     |
+=======================+================================================================================================================+
|copy()	                |           返回字典的浅拷贝                                                                                     |
+=======================+================================================================================================================+
|fromkeys(seq[, v])	|从 seq 返回一个新的字典，值等于 v（默认为 None）                                                                |
+=======================+================================================================================================================+
|get(key[,d])	        |返回 key 的值。如果 key 不存在，返回 d（默认为 None）。                                                         |
+=======================+================================================================================================================+
|items()	        |以列表形式，返回可遍历的 (key, value) 元组数组。                                                                |
+=======================+================================================================================================================+
|keys()	                |以列表的形式，返回字典中所有的 key。                                                                            |
+=======================+================================================================================================================+
|pop(key[,d])	        |用 key 删除元素并返回其 value。如果没有找到 key，则返回 d；如果没|有提供 d 并且没有找到 key，则会引发 KeyError。|
+=======================+================================================================================================================+
|popitem()	        |删除并返回一个任意元素，如果字典为空，则会引发 KeyError。                                                       |
+=======================+================================================================================================================+
|setdefault(key[,d])	|如果 key 在字典中，则返回对应的 value；否则，插入 key，将其值设为 d，并返回 d（默认为 None）。                  |
+=======================+================================================================================================================+
|update([other])	|将 other 字典中的键/值对更新到字典中，覆盖现有键。                                                              |
+=======================+================================================================================================================+
|values()	        |以列表的形式，返回字典中所有的 value                                                                            |
+-----------------------+----------------------------------------------------------------------------------------------------------------+

其中一些在上述示例中已经被使用过了。

::
    all_stars = {}.fromkeys(['Lebron', 'Kobe', 'Curry'], 'NBA')
     
    all_stars
    {'Lebron': 'NBA', 'Curry': 'NBA', 'Kobe': 'NBA'}
    
    all_stars.keys()  # 返回所有 key
    dict_keys(['Lebron', 'Curry', 'Kobe'])
         
    all_stars.values()  # 返回所有 value
    dict_values(['NBA', 'NBA', 'NBA'])
     
    for item in all_stars.items():
   ...     print(item)
   ... 
   ('Lebron', 'NBA')
   ('Curry', 'NBA')
   ('Kobe', 'NBA')

<button>Run ...</button>

字典推导式
-----


字典推导式（Dict Comprehensions）是一种优雅、简洁的方式，可以从一个 iterable 中创建新的字典。

字典推导式由花括号标识，其中包含一个表达式对（key:value），紧随其后的是 for 语句。

来看一个例子，NBA All-Star。

::
     all_stars = ['Lebron', 'Kobe', 'Curry']
     
     d = {key: value for key, value in enumerate(all_stars)}  
     d
    {0: 'Lebron', 1: 'Kobe', 2: 'Curry'}

<button>Run ...</button>

列表推导式可以可选地包含更多的 for 或 if 语句，if 语句可以过滤出新字典的元素。

::
    # value 的长度需要大于 5
     d = {key: value for key, value in enumerate(all_stars) if len(value) > 5}  
     d
   {0: 'Lebron'}

<button>Run ...</button>

666，老詹独一档。。。

字典与内置函数
-----

下述内置函数通常与字典一起使用，来执行不同的任务。
+--------+--------------------------------------------------------------------------------------+
函数     |描述                                                                                  |   
+======+========================================================================================+
all()	 |如果字典的所有 key 都是 True（或者字典为空），返回 True。                             |   
+======+========================================================================================+
any()	 |如果字典的所有 key 都是 True，返回 True；如果字典为空，返回 False。                   |   
+======+========================================================================================+
len()	 |返回字典的长度（元素个数）                                                            |  
+======+========================================================================================+
sorted() |	返回一个新的排序字典（不排序字典本身）                                          |
+------+----------------------------------------------------------------------------------------+


作者 & 更新时间
------------------------------------
作者: `CSDN <http://blog.csdn.net/liang19890820>`_
