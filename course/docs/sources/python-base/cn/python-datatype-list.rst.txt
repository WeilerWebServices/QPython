简述
================


Python 提供了一系列复合数据类型，通常被称为序列，列表（List）就是其中的一种。

在 Python 中，列表是使用最频繁、用途最广泛的数据类型之一，非常灵活。


列表
-------------


列表是有序的元素序列，在 Python 中，列表由内置的 list 类型定义。

要创建列表，需要将所有项（元素）放在方括号（[]）内，以逗号（,）分隔。

::


    l = ['P', 'y', 't', 'h', 'o', 'n']
    type(l)

<button>Run ...</button>


列表可以有任意数量（n >= 0）的元素，当 n 为 0 时，表示一个空列表。

列表中元素的类型可以不同，支持数字、字符串，甚至可以包含列表（所谓的嵌套）。

::

    l = []  # 空列表
 
    l = [1, 2, 3]  # 整形列表

    l = [1, 5.5, 'Python']  # 混合类型列表

    l = [6, ['Python'], ['P', 'y', 't', 'h', 'o', 'n']]  # 嵌套列表

<button>Run ...</button>


访问列表中的元素
================



列表索引
-------------


和字符串类似，可以使用索引操作符（[]）访问列表中的一个元素。

.. image:: http://img.blog.csdn.net/20170516213732766


::

    l = ['P', 'y', 't', 'h', 'o', 'n']

    l[0]  # 第 1 个元素
 
    l[4]  # 第 5 个元素


<button>Run ...</button>

序列也可以反向索引，-1 表示最后一个元素，-2 表示倒数第二个元素，依此类推。

::

    l[-6]  # 第 1 个元素


    l[-2]  # 第 5 个元素

<button>Run ...</button>


同样地，嵌套的列表可以使用嵌套索引来访问。

::

    l = [6, ['Python'], ['P', 'y', 't', 'h', 'o', 'n']]  # 嵌套列表

    l[0]

    l[2][3]  # 使用嵌套索引

<button>Run ...</button>


对列表进行切片
------------------------


可以使用切片操作符（:）来访问列表中的一系列元素。

**PS**： 通过上图，可以很直观地看到切片。

::

    l = ['P', 'y', 't', 'h', 'o', 'n']

    l[1:4]  #  第 2 个到第 4 个元素

    l[1:]  # 第 2 个到最后一个元素（将索引默认设置为列表的开始或结束）

    l[1:100]  # 索引太大，被截断至列表长度处

    l[:]  # 所有元素（从开始到结束）


<button>Run ...</button>



和索引类似，切片操作也可以使用反向索引：

::

    l[-5:-2]  # 第 2 个到第 5 个元素

    l[:-3]  # 开始到第 3 个元素
 
    l[-3:]  # 第 4 个到最后一个元素

<button>Run ...</button>


更改及添加元素
----------------


列表是可变的，也就是说，其中的元素可以被改变（不像字符串或元组）。

可以使用赋值运算符（=）改变一个或一系列元素。

::

    l = ['P', 'y', 't', 'h', 'o', 'n']

    l[0] = 'H'  # 更改第 1 个元素
    l

    l[1:4] = ['e', 'l', 'l']  # 更改第 2 个到第四个元素
    l


<button>Run ...</button>


可以使用 append() 方法将一个元素添加到列表中，或者使用 extend() 方法添加多个元素。

::

    l = ['P', 'y']
 
    l.append('t')  # 添加一个元素
    l

    l.extend(['h', 'o', 'n'])  # 添加多个元素
    l


<button>Run ...</button>


此外，可以使用 insert() 方法将一个元素插入到所需的位置。要插入多个元素，可以将其挤压进到一个列表的空切片中。

::

    l = ['P', 'n']

    l.insert(1, 'y')  # 在指定索引处插入一个元素
    l


    l[2:2] = ['t', 'h', 'o']  # 插入多个元素
    l

<button>Run ...</button>


从列表中删除元素
----------------

可以使用关键字 del，从列表中删除一个或多个元素，甚至可以完全删除列表。

::

    l = ['P', 'y', 't', 'h', 'o', 'n']
 
    del l[2]  # 删除第 3 个元素
    l

 
    del l[1:3]  # 删除第 2 个到第 3 个元素
    l

 
    del l  # 删除列表
    l

<button>Run ...</button>


可以使用 remove() 方法删除指定的元素，或用 pop() 方法删除一个给定索引处的元素。

如果没有提供索引，pop() 方法将删除并返回最后一个元素。这有助于我们将列表实现为栈（先进后出数据结构）。

还可以使用 clear() 方法清空一个列表。

::

    l = ['P', 'y', 't', 'h', 'o', 'n']
 
    l.remove('h')  # 删除指定的元素
    l


    l.pop(2)  # 删除并返回第 3 个元素

    l

 
    l.pop()  # 删除并返回最后一个元素

    l

 
    l.clear()  # 清空列表
    l

<button>Run ...</button>


最后，还可以通过将一个空列表分配给一个元素切片的方式来删除列表中的项目。

::

    l = ['P', 'y', 't', 'h', 'o', 'n']
 
    l[1:3] = []
    l
 
    l[1:4] = []
    l


<button>Run ...</button>

基本操作
----------------


在字符串一节中已经提过，所有的序列都有几种基本操作。列表是序列的一种，固然也适用。

连接列表

操作符 + 用于组合列表，也被称为连接。

::


    l1 = ['P', 'y']
    l2 = ['t', 'h', 'o', 'n']

    l1 + l2


<button>Run ...</button>

重复列表
----------------


操作符 * 会以给定次数重复一个列表。


::

    l = ['P', 'y', 't', 'h', 'o', 'n']
 
    l * 2  # 重复列表 2 次

<button>Run ...</button>

最小值/最大值
----------------


min() 和 max() 用于获取最小值和最大值。

::


    l = ['P', 'y', 't', 'h', 'o', 'n']
 
    min(l)  # 最小值

    max(l)  # 最大值


<button>Run ...</button>

列表长度
----------------


要获取一个列表的长度，可以使用内置函数 len()。

::

    l = ['P', 'y', 't', 'h', 'o', 'n']

    len(l)  # 元素个数

<button>Run ...</button>

成员测试
----------------


使用关键字 in，可以测试一个元素是否存在于列表中。

::

    l = ['P', 'y', 't', 'h', 'o', 'n']

    't' in l

    'o' not in l


<button>Run ...</button>



遍历列表
----------------


使用 for 循环，可以遍历列表中的每个元素。

::


    l = ['P', 'y', 't', 'h', 'o', 'n']
    for letter in l:
        ^4$print(letter)

<button>Run ...</button>


列表的方法
------------

列表中有许多方法，可以通过 dir() 来查看方法列表：


::

     dir(list)

<button>Run ...</button>



以双下划线开始和结尾的（例如：__add__）暂不考虑，后面讨论。剩下以下几个：

+------------+------------------------------------------------------------------------------------------+
| 方法       | 描述                                                                                     |
+============+==========================================================================================+
|append()    | 将元素添加到列表的末尾                                                                   |    
+------------+------------------------------------------------------------------------------------------+
| extend()   |将列表的所有元素添加到另一个列表                                                          |
+------------+------------------------------------------------------------------------------------------+
| insert()   |在定义的索引处插入一个元素                                                                |
+------------+------------------------------------------------------------------------------------------+
| remove()   |       从列表中删除一个元素                                                               |         
+------------+------------------------------------------------------------------------------------------+
| pop()      |从列表中删除所有元素                                                                      |
+------------+------------------------------------------------------------------------------------------+
|clear()     |断言，用于判断变量或者条件表达式的值是否为真                                              |
+------------+------------------------------------------------------------------------------------------+
|index()     |返回第一个匹配项的索引                                                                    |
+------------+------------------------------------------------------------------------------------------+
| count()    |统计某个元素在列表中出现的次数                                                            |
+------------+------------------------------------------------------------------------------------------+
| sort()     |      按升序排列列表中的元素                                                              |
+------------+------------------------------------------------------------------------------------------+
|reverse()   |	反转列表中元素的顺序                                                                    |
+------------+------------------------------------------------------------------------------------------+
|copy()	     |返回一个列表的浅拷贝                                                                      |
+------------+------------------------------------------------------------------------------------------+


按照惯例，在使用不熟悉的方法时，先看官方文档描述：


::


    help(list.append)

    >>>Help on method_descriptor:

    append(...)
        L.append(object) -> None -- append object to end



可以使用 list.method() 的方式来访问方法，上面已经列举了一些。

::


    l = ['P', 'y', 't', 'h', 'o', 'n']
 
    l.index('h')  # 返回第一个匹配 'h' 的索引


    l.count('o')  # 统计 'o' 在列表中出现的次数


    l.sort()  # 按升序排列列表中的元素
    l


    l.reverse()  # 反转列表中元素的顺序
    l


<button>Run ...</button>

列表推导式
----------------


列表推导式（List Comprehension）是一种优雅、简洁的方式，通过现有列表来创建一个新列表。

列表推导式由方括号标识，其中包含一个表达式，紧随其后的是 for 语句。

假设，要创建一个正方形：

::

    squares = []
    for x in range(10):
        ^4$squares.append(x**2)
 
    square

<button>Run ...</button>



用列表推导式，可以获得相同的结果：

::

    squares = [x**2 for x in range(10)]

<button>Run ...</button>

这也相当于：squares = map(lambda x: x**2, range(10))，但它更简洁可读。

列表推导式可以可选地包含更多的 for 或 if 语句，if 语句可以过滤出新列表的元素。

::

    squares = [x**2 for x in range(10) if x > 5]
    squares

<button>Run ...</button>

::

    odd = [x for x in range(10) if x % 2 == 1]
    odd

<button>Run ...</button>


::

    [x+y for x in ['I love ','I like '] for y in ['C++','Python']]
    ['I love C++', 'I love Python', 'I like C++', 'I like Python']

<button>Run ...</button>



列表与内置函数
---------------


下述内置函数通常与列表一起使用，来执行不同的任务。


+------------+------------------------------------------------------------------------------------------+
|函数        |描述                                                                                      |
+============+==========================================================================================+
|all()       |	如果列表中的所有元素都是 True（或者列表为空），则返回 True。                            |
+------------+------------------------------------------------------------------------------------------+
|any()	     |如果列表中的所有元素都是 True，则返回 True；如果列表为空，则返回 False。                  |
+------------+------------------------------------------------------------------------------------------+
|enumerate() |	返回一个枚举对象，其中包含了列表中所有元素的索引和值（配对）。                          |
+------------+------------------------------------------------------------------------------------------+
|len()	     |返回列表的长度（元素个数）。                                                              |
+------------+------------------------------------------------------------------------------------------+
|max()       |	返回列表的最大项                                                                        |
+------------+------------------------------------------------------------------------------------------+
|min()       |	返回列表的最小项                                                                        |
+------------+------------------------------------------------------------------------------------------+
|sorted()    |	返回一个排序的新列表（不排序列表本身）                                                  |
+------------+------------------------------------------------------------------------------------------+
|sum()       |	返回列表的所有元素之和                                                                  |
+------------+------------------------------------------------------------------------------------------+
|list()	     |将 iterable（元组、字符串、集合、字典）转换为列表                                         |
+------------+------------------------------------------------------------------------------------------+


作者 & 更新时间
------------------------------------
作者: `一去丶二三里 <http://blog.csdn.net/liang19890820>`_

提交: 2017/12/6
