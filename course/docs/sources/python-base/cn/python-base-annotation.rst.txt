简述
================

对于任何编程语言来说，都可以在代码中包含注释。这不仅有助于解释代码以提高可读性，也便于日后自己参考或者他人阅读，有时对跟踪问题也非常有用。

添加注释很有必要，好的开发人员基本都会大量地使用注释。


注释风格
---------
关键字是预先保留的标识符，每个关键字都有特殊的含义。编程语言众多，但每种语言都有相应的关键字，Python 也不例外，它自带了一个 *keyword* 模块，用于检测关键字。

在 Python 中，注释的风格与其他语言相比有很大的不同，但使用起来也很简单，主要包含两种：
  - 单行注释
  - 多行注释

单行注释适用于简短、快速的注释（或者用于调试），而多行注释常用于描述一段内容，或屏蔽整个代码块。

**PS**： 注释是写给其他开发人员（包括自己）看的，Python 解释器会忽略注释。

单行注释
-------------
# 被用作单行注释符号，**使用 # 时，其右侧的任何数据都会被忽略，被当做是注释。**

例如，在代码的上面或下面添加注释：

::


    #print("这是单行注释")

    print("Hello, World!")

    #print("这也是单行注释")

这将产生以下结果：

::

    Hello, World!

也可以在代码的后面添加注释：

::


    print("Hello, World!")  #这是单行注释

总之，# 号右侧的内容是不会被执行的。



多行注释
----------------


相比单行注释，多行注释略有不同，需要在想要注释的部分之前和之后添加 三个单引号（'''）或三个双引号（"""）。

例如，描述一段内容，或屏蔽整个代码块：

::

   '''
   这在多行注释中
   这也在多行注释中
   这仍然在多行注释中
   '''

   """
   if True:
       print("Hello")
   else:
       print("Python")
   """

   print("Hello, World!")

除此之外，还有一种方式，使用多个单行注释来表示多行注释：

::

   #print("这是注释")

   print("Hello, World!")


这种方式适用于简短的代码注释。大多数情况下，相比三引号形式还是略显复杂，一般使用率不高。

**建议**： 注释是我们的好伙伴，应尽量多写，尤其是复杂的 Python 代码。

作者 & 更新时间
------------------------------------
作者: `一去丶二三里 <http://blog.csdn.net/liang19890820>`_

提交: 2017/12/6
